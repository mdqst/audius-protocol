docker-login:
  steps:
    - run:
        name: Docker login
        command: echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

docker-logout:
  steps:
    - run:
        when: always
        name: Log out of Docker
        command: docker logout

install-crane:
  steps:
    - run:
        name: Install Crane
        command: |
          VERSION=v0.19.1
          OS=Linux
          ARCH=x86_64
          curl -sL "https://github.com/google/go-containerregistry/releases/download/${VERSION}/go-containerregistry_${OS}_${ARCH}.tar.gz" > go-containerregistry.tar.gz
          tar -zxvf go-containerregistry.tar.gz -C $HOME/bin/ crane

docker-tag-images:
  description: 'Update tags of docker images'
  parameters:
    tag:
      type: enum
      enum: ['prerelease', 'edge', 'current', '__version__']
    service:
      type: enum
      enum:
        [
          'discovery-provider',
          'creator-node',
          'identity-service',
          'core',
          'all'
        ]
  steps:
    - install-crane
    - docker-login
    - run:
        name: Update docker containers with release tags
        command: |
          discovery=(
            comms
            discovery-provider
            discovery-provider-notifications
            discovery-provider-openresty
            es-indexer
            relay
            sla-auditor
            solana-relay
            trending-challenge-rewards
            crm
            mri
            trpc
            backfill-audio-analyses
            verified-notifications
          )
          creator=(
            mediorum
          )
          identity=(
            identity-service
          )
          core=(
            core
          )

          case "<< parameters.service >>" in
            discovery-provider)
              images=( "${discovery[@]}" )
              ;;
            creator-node)
              images=( "${creator[@]}" )
              ;;
            identity-service)
              images=( "${identity[@]}" )
              ;;
            core)
              images=( "${core[@]}" )
              ;;
            all)
              images=(
                "${discovery[@]}"
                "${creator[@]}"
                "${identity[@]}"
                "${core[@]}"
              )
              ;;
            *)
              echo "Unhandled service, updating no images."
              images=()
              ;;
          esac

          tag="<< parameters.tag >>"
          if [[ "$tag" = "__version__" ]]; then
            tag="$exported_version_tag"
            [ -n "$tag" ]
          fi

          for image in "${images[@]}"; do
            echo "adding tag '$tag' to image 'audius/${image}:${CIRCLE_SHA1}'"
            crane copy "audius/${image}:${CIRCLE_SHA1}" "audius/${image}:${tag}"
          done
    - docker-logout

docker-prune:
  description: 'Perform docker system prune based on disk usage'
  parameters:
    prune-threshold:
      default: '70'
      type: string
    full-prune-threshold:
      default: '50'
      type: string
  steps:
    - run:
        when: always
        name: 'Prune docker cache if disk usage exceeds threshold'
        command: |
          PRUNE_THRESHOLD=<< parameters.prune-threshold >>
          FULL_PRUNE_THRESHOLD=<< parameters.full-prune-threshold >>

          function disk_usage_above_threshold() {
            threshold="$1"
            disk_usage_pct="$(df | grep /dev/root | awk '{print $5}' | grep -oP "^\d+")"
            echo "Disk usage at ${disk_usage_pct}%"
            [ "$disk_usage_pct" -gt "$threshold" ]
          }

          if disk_usage_above_threshold $PRUNE_THRESHOLD; then
            echo "Exceeded threshold %$PRUNE_THRESHOLD, running docker system prune..."
            docker system prune -f --filter "until=20m"
            if disk_usage_above_threshold $FULL_PRUNE_THRESHOLD; then
              echo "Still exceeded threshold %$FULL_PRUNE_THRESHOLD, running docker system prune -a..."
              docker system prune -af --filter "until=20m"
            fi
          fi
